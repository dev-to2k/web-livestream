version: '3.8'

services:
  # Load Balancer - HAProxy
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: live-stream-lb
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # HAProxy stats
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./haproxy/certs:/etc/ssl/certs:ro
    depends_on:
      - websocket-server-1
      - websocket-server-2
      - api-server-1
      - api-server-2
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Servers (Scalable)
  websocket-server-1:
    build:
      context: ./server
      target: production
    container_name: websocket-server-1
    environment:
      - NODE_ENV=production
      - SERVER_ID=ws-1
      - PORT=5000
      - REDIS_CLUSTER_URLS=redis-cluster-1:6379,redis-cluster-2:6380,redis-cluster-3:6381
      - MONGODB_URI=mongodb://mongodb-primary:27017,mongodb-secondary:27017/livestream?replicaSet=rs0
      - MAX_CONNECTIONS=1000
      - ROOM_SHARD_RANGE=0-333
    depends_on:
      - redis-cluster-1
      - mongodb-primary
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  websocket-server-2:
    build:
      context: ./server
      target: production
    container_name: websocket-server-2
    environment:
      - NODE_ENV=production
      - SERVER_ID=ws-2
      - PORT=5000
      - REDIS_CLUSTER_URLS=redis-cluster-1:6379,redis-cluster-2:6380,redis-cluster-3:6381
      - MONGODB_URI=mongodb://mongodb-primary:27017,mongodb-secondary:27017/livestream?replicaSet=rs0
      - MAX_CONNECTIONS=1000
      - ROOM_SHARD_RANGE=334-666
    depends_on:
      - redis-cluster-2
      - mongodb-primary
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # API Servers
  api-server-1:
    build:
      context: ./server
      target: production
    container_name: api-server-1
    environment:
      - NODE_ENV=production
      - SERVER_ID=api-1
      - PORT=5000
      - REDIS_CLUSTER_URLS=redis-cluster-1:6379,redis-cluster-2:6380,redis-cluster-3:6381
      - MONGODB_URI=mongodb://mongodb-primary:27017,mongodb-secondary:27017/livestream?replicaSet=rs0
      - SERVER_TYPE=api
    depends_on:
      - redis-cluster-1
      - mongodb-primary
    networks:
      - app-network
    restart: unless-stopped

  api-server-2:
    build:
      context: ./server
      target: production
    container_name: api-server-2
    environment:
      - NODE_ENV=production
      - SERVER_ID=api-2
      - PORT=5000
      - REDIS_CLUSTER_URLS=redis-cluster-1:6379,redis-cluster-2:6380,redis-cluster-3:6381
      - MONGODB_URI=mongodb://mongodb-primary:27017,mongodb-secondary:27017/livestream?replicaSet=rs0
      - SERVER_TYPE=api
    depends_on:
      - redis-cluster-2
      - mongodb-primary
    networks:
      - app-network
    restart: unless-stopped

  # SFU Servers for Media Routing
  sfu-server-1:
    build:
      context: ./sfu
      target: production
    container_name: sfu-server-1
    environment:
      - NODE_ENV=production
      - SERVER_ID=sfu-1
      - PORT=3478
      - REDIS_URL=redis://redis-cluster-1:6379
      - MEDIASOUP_LISTEN_IP=0.0.0.0
      - MEDIASOUP_ANNOUNCED_IP=127.0.0.1
    ports:
      - "40000-40100:40000-40100/udp"  # RTP/RTCP ports
    depends_on:
      - redis-cluster-1
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  sfu-server-2:
    build:
      context: ./sfu
      target: production
    container_name: sfu-server-2
    environment:
      - NODE_ENV=production
      - SERVER_ID=sfu-2
      - PORT=3478
      - REDIS_URL=redis://redis-cluster-2:6380
      - MEDIASOUP_LISTEN_IP=0.0.0.0
      - MEDIASOUP_ANNOUNCED_IP=127.0.0.1
    ports:
      - "40101-40200:40000-40100/udp"  # RTP/RTCP ports
    depends_on:
      - redis-cluster-2
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  # Client (React Frontend)
  client:
    build:
      context: ./client
      target: production
    container_name: live-stream-client
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster for Caching and Pub/Sub
  redis-cluster-1:
    image: redis:7-alpine
    container_name: redis-cluster-1
    command: >
      redis-server 
      --port 6379
      --cluster-enabled yes
      --cluster-config-file nodes-6379.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
      - "16379:16379"  # Cluster bus port
    volumes:
      - redis-cluster-1-data:/data
    networks:
      - app-network
    restart: unless-stopped

  redis-cluster-2:
    image: redis:7-alpine
    container_name: redis-cluster-2
    command: >
      redis-server 
      --port 6380
      --cluster-enabled yes
      --cluster-config-file nodes-6380.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6380:6380"
      - "16380:16380"  # Cluster bus port
    volumes:
      - redis-cluster-2-data:/data
    networks:
      - app-network
    restart: unless-stopped

  redis-cluster-3:
    image: redis:7-alpine
    container_name: redis-cluster-3
    command: >
      redis-server 
      --port 6381
      --cluster-enabled yes
      --cluster-config-file nodes-6381.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6381:6381"
      - "16381:16381"  # Cluster bus port
    volumes:
      - redis-cluster-3-data:/data
    networks:
      - app-network
    restart: unless-stopped

  # MongoDB Replica Set
  mongodb-primary:
    image: mongo:6.0
    container_name: mongodb-primary
    command: >
      mongod --replSet rs0 --bind_ip_all --port 27017
      --enableMajorityReadConcern false
    ports:
      - "27017:27017"
    volumes:
      - mongodb-primary-data:/data/db
      - ./mongodb/init-replica.js:/docker-entrypoint-initdb.d/init-replica.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=livestream
    networks:
      - app-network
    restart: unless-stopped

  mongodb-secondary:
    image: mongo:6.0
    container_name: mongodb-secondary
    command: >
      mongod --replSet rs0 --bind_ip_all --port 27017
      --enableMajorityReadConcern false
    ports:
      - "27018:27017"
    volumes:
      - mongodb-secondary-data:/data/db
    depends_on:
      - mongodb-primary
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.5.0
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Message Queue (Apache Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-logs:/var/lib/zookeeper/log
    networks:
      - app-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-cluster-1-data:
    driver: local
  redis-cluster-2-data:
    driver: local
  redis-cluster-3-data:
    driver: local
  mongodb-primary-data:
    driver: local
  mongodb-secondary-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  zk-data:
    driver: local
  zk-logs:
    driver: local
  kafka-data:
    driver: local