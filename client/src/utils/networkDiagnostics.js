// Network diagnostic utilities for troubleshooting connection issues
export const NetworkDiagnostics = {
  /**
   * Check if the server is reachable
   */
  async checkServerHealth(serverUrl = "http://localhost:5000") {
    try {
      const response = await fetch(`${serverUrl}/health`, {
        method: "GET",
        timeout: 5000,
      });
      return {
        isReachable: response.ok,
        status: response.status,
        message: response.ok
          ? "Server is running"
          : "Server responded with error",
      };
    } catch (error) {
      return {
        isReachable: false,
        status: null,
        message: this.getErrorMessage(error),
        error: error.message,
      };
    }
  },

  /**
   * Get user-friendly error message based on error type
   */
  getErrorMessage(error) {
    if (
      error.name === "TypeError" &&
      error.message.includes("Failed to fetch")
    ) {
      return "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Server c√≥ th·ªÉ ch∆∞a ch·∫°y ho·∫∑c b·ªã ch·∫∑n.";
    }

    if (
      error.code === "ECONNREFUSED" ||
      error.message.includes("ERR_CONNECTION_REFUSED")
    ) {
      return "Server t·ª´ ch·ªëi k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra server c√≥ ƒëang ch·∫°y kh√¥ng.";
    }

    if (error.message.includes("xhr poll error")) {
      return "L·ªói polling WebSocket. C√≥ th·ªÉ do v·∫•n ƒë·ªÅ m·∫°ng ho·∫∑c c·∫•u h√¨nh proxy.";
    }

    if (error.message.includes("timeout")) {
      return "K·∫øt n·ªëi qu√° th·ªùi gian ch·ªù. Ki·ªÉm tra t·ªëc ƒë·ªô m·∫°ng v√† server.";
    }

    return error.message || "L·ªói k·∫øt n·ªëi kh√¥ng x√°c ƒë·ªãnh";
  },

  /**
   * Get troubleshooting steps based on error
   */
  getTroubleshootingSteps(error) {
    const steps = [];

    if (
      error.message?.includes("ERR_CONNECTION_REFUSED") ||
      error.code === "ECONNREFUSED"
    ) {
      steps.push(
        "Ki·ªÉm tra server backend c√≥ ƒëang ch·∫°y kh√¥ng:",
        "1. M·ªü terminal/command prompt",
        "2. Ch·∫°y l·ªánh: npm run server",
        "3. ƒê·∫£m b·∫£o server ch·∫°y tr√™n port 5000"
      );
    }

    if (error.message?.includes("xhr poll error")) {
      steps.push(
        "Kh·∫Øc ph·ª•c l·ªói polling:",
        "1. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng",
        "2. T·∫Øt proxy ho·∫∑c VPN n·∫øu c√≥",
        "3. Th·ª≠ refresh l·∫°i trang",
        "4. Ki·ªÉm tra t∆∞·ªùng l·ª≠a c√≥ ch·∫∑n port 5000 kh√¥ng"
      );
    }

    if (steps.length === 0) {
      steps.push(
        "C√°c b∆∞·ªõc kh·∫Øc ph·ª•c chung:",
        "1. Kh·ªüi ƒë·ªông l·∫°i server: npm run server",
        "2. Kh·ªüi ƒë·ªông l·∫°i client: npm run client",
        "3. Ki·ªÉm tra ports 3000 v√† 5000 c√≥ b·ªã chi·∫øm kh√¥ng",
        "4. Th·ª≠ ch·∫°y: npm run dev ƒë·ªÉ kh·ªüi ƒë·ªông ƒë·ªìng th·ªùi"
      );
    }

    return steps;
  },

  /**
   * Check if port is available
   */
  async checkPort(port, host = "localhost") {
    try {
      const response = await fetch(`http://${host}:${port}`, {
        method: "HEAD",
        timeout: 3000,
      });
      return {
        isAvailable: false, // Port is in use
        isResponding: response.ok,
      };
    } catch (error) {
      // If fetch fails, port might be available or server not responding
      return {
        isAvailable: true, // Port seems available
        isResponding: false,
        error: error.message,
      };
    }
  },

  /**
   * Run comprehensive network diagnostics
   */
  async runDiagnostics() {
    console.log("üîç Running network diagnostics...");

    const results = {
      timestamp: new Date().toISOString(),
      serverHealth: await this.checkServerHealth(),
      ports: {
        server: await this.checkPort(5000),
        client: await this.checkPort(3000),
      },
    };

    console.log("üìä Diagnostic Results:", results);
    return results;
  },
};

// Auto-run diagnostics when there are connection issues
if (typeof window !== "undefined") {
  window.NetworkDiagnostics = NetworkDiagnostics;

  // Add global error listener for network issues
  window.addEventListener("unhandledrejection", (event) => {
    if (
      event.reason?.message?.includes("ERR_CONNECTION_REFUSED") ||
      event.reason?.message?.includes("xhr poll error")
    ) {
      console.warn("üîç Network error detected, running diagnostics...");
      NetworkDiagnostics.runDiagnostics();
    }
  });
}

export default NetworkDiagnostics;
